<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<meta name="Keywords" content="linting,json,json linting,parse json,test json" />
	<meta name="Description" content="Providing simple, secure, client-side, network-free JSON linting that ensures no one else is seeing the data you are testing." />

	<title>
		Secure, Client-Side, Network-Free JSON Linting
	</title>

	<style type="text/css">

		.description code,
		.description strong {
			background-color: #FFF3A0 ;
			color: #26220A ;
			font-weight: 400 ;
		}

		.intake__input {
			background-color: #FAFDFF ;
			border: 2px solid #3978A1 ;
			box-sizing: border-box ;
			display: block ;
			font-size: 100% ;
			height: 100px ;
			margin-bottom: 10px ;
			padding: 10px 10px 10px 10px ;
			width: 100% ;
		}

		.intake__submit {
			background-color: #4E86AA ;
			border: 2px solid #3978A1 ;
			border-radius: 4px 4px 4px 4px ;
			color: #FFFFFF ;
			display: inline-block ;
			font-size: 100% ;
			padding: 5px 15px 5px 15px ;
		}

		.output--pending {
			display: none ;
		}

		.output--error .output__success,
		.output--success .output__error {
			display: none ;
		}

		.error {
			background-color: #FFF0F7 ;
			border: 2px solid #FFCAE3 ;
			border-radius: 4px 4px 4px 4px ;
			color: #FF0077 ;
			padding: 10px 10px 10px 10px ;
		}

		.success__pre {
			background-color: #F5F2F0 ;
			border-radius: 4px 4px 4px 4px ;
			padding: 10px 10px 10px 10px ;
		}

		.success__code {
			/* Borrowed from PrismJS 1.15.0 https://prismjs.com/download.html#themes=prism&languages=clike+javascript */
			/**
			 * prism.js default theme for JavaScript, CSS and HTML
			 * Based on dabblet (http://dabblet.com)
			 * @author Lea Verou
			 */
			color: black ;
			background: none ;
			text-shadow: 0 1px white ;
			font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace ;
			text-align: left ;
			white-space: pre ;
			word-spacing: normal ;
			word-break: normal ;
			word-wrap: normal ;
			line-height: 1.5 ;

			-moz-tab-size: 4 ;
			-o-tab-size: 4 ;
			tab-size: 4 ;

			-webkit-hyphens: none ;
			-moz-hyphens: none ;
			-ms-hyphens: none ;
			hyphens: none ;
		}

	</style>
</head>
<body>

	<h1>
		Secure, Client-Side, Network-Free JSON Linting
	</h1>

	<p class="description">
		The JSON linting on this page is performed completely by <strong>client-side JavaScript
		using <code>JSON.parse()</code></strong> with <strong>no external dependencies</strong>.
		As such, you can rest assured that absolutely <strong>no one but you can see the data</strong>
		that gets pasted into this form.
	</p>

	<form class="intake">

		<h2>
			Input:
		</h2>

		<textarea class="intake__input" placeholder="Paste your JSON here..."></textarea>

		<button type="submit" class="intake__submit">
			Parse JSON Input
		</button>

	</form>

	<div class="output output--pending">

		<h2>
			Results:
		</h2>

		<!-- If the JSON could not be parsed, show error. -->
		<div class="output__error error">
			<strong class="error__label">Input could not be parsed:</strong>
			<span class="error__message">The input is not valid JSON.</span>
		</div>

		<!-- If the JSON could be parsed, show formatted output. -->
		<div class="output__success success">
			<pre class="language-javascript success__pre"><code class="language-javascript success__code"></code></pre>
		</div>

	</div>

	<script type="text/javascript">

		var intakeView = {
			form: document.querySelector( ".intake" ),
			input: document.querySelector( ".intake__input" )
		};

		var outputView = {
			output: document.querySelector( ".output" ),
			error: document.querySelector( ".output__error" ),
			success: document.querySelector( ".output__success" )
		};

		var errorView = {
			message: document.querySelector( ".error__message" )
		};

		var successView = {
			code: document.querySelector( ".success__code" )
		};

		intakeView.form.addEventListener( "submit", handleIntakeSubmit, false );

		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //

		// I handle the form submission, moving the input through linting.
		function handleIntakeSubmit( event ) {

			// Since we're handling this client-side, prevent any form behaviors.
			event.preventDefault();
			event.stopPropagation();

			resetOutput();

			try {

				var parsedInput = JSON.parse( intakeView.input.value );

			} catch ( error ) {

				renderOutputError( error );
				return;
				
			}

			renderOutputSuccess( parsedInput );

		}


		// I render the given linting error.
		function renderOutputError( error ) {

			console.warn( "Input could not be parsed:" );
			console.error( error );

			// Move output to error state.
			outputView.output.classList.add( "output--error" );
			outputView.output.classList.remove( "output--pending", "output--success" );

			errorView.message.innerText = error.message;

		}


		// I render the given linting success.
		function renderOutputSuccess( data ) {

			console.warn( "Successfully parsed input:" );
			console.log( data );

			// Move output to success state.
			outputView.output.classList.add( "output--success" );
			outputView.output.classList.remove( "output--pending", "output--error" );

			successView.code.innerText = JSON.stringify( data, null, "\t" );

		}


		// I reset the output views.
		function resetOutput() {

			// Move output to pending state.
			outputView.output.classList.add( "output--pending" );
			outputView.output.classList.remove( "output--error", "output--success" );

			// Clear error and success views.
			errorView.message.innerText = "";
			successView.code.innerText = "";

		}

	</script>

</body>
</html>
